name: Production Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version from package.json (e.g., 1.0.0 or 1.0.0-beta.1). Do NOT include the "v" prefix.'
        required: true
        type: string

jobs:
  release:
    name: Release
    environment: Production
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write  # Required to create and push tags

    env:
      PROJECT_NAME: '@defi-wonderland/aztec-standards'

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Install Node
        uses: actions/setup-node@v4
        with:
          registry-url: "https://registry.npmjs.org"
          cache: "yarn"

      # TODO: Automate changing package.json version from the workflow input
      #       (e.g., open a PR or push a signed commit) so manual edits are not required.
      - name: Validate input version matches package.json
        run: |
          INPUT_VERSION="${{ github.event.inputs.version }}"
          PKG_VERSION=$(node -p "require('./package.json').version")
          echo "Input version: $INPUT_VERSION"
          echo "package.json version: $PKG_VERSION"
          if [ "$INPUT_VERSION" != "$PKG_VERSION" ]; then
            echo "::error::Input version ($INPUT_VERSION) does not match package.json version ($PKG_VERSION). Update package.json or re-run with the matching version (no 'v' prefix)."
            exit 1
          fi

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Detect Aztec version
        id: aztec-version
        run: |
          AZTEC_VERSION=$(node -p "require('./package.json').config.aztecVersion")
          echo "AZTEC_VERSION=$AZTEC_VERSION" >> "$GITHUB_OUTPUT"
          echo "Aztec version is $AZTEC_VERSION"

      - name: Install Aztec CLI
        run: |
          curl -s https://install.aztec.network > tmp.sh
          bash tmp.sh <<< yes "yes"
      - name: Update path
        run: echo "/home/runner/.aztec/bin" >> $GITHUB_PATH

      - name: Set Aztec version
        run: |
          VERSION=${AZTEC_VERSION} aztec-up

      
      # Install dependencies AND the current latest version of the package we're releasing now.
      - name: Install dependencies
        run: |
          yarn --frozen-lockfile
          yarn add @defi-wonderland/aztec-standards@latest

      - name: Compile
        run: yarn compile

      - name: Codegen
        run: aztec codegen target --outdir artifacts

      - name: Compile artifacts to JS
        run: |
          mkdir -p dist/
          yarn tsc artifacts/*.ts --outDir dist/ --skipLibCheck --target es2020 --module nodenext --moduleResolution nodenext --resolveJsonModule --declaration

            # TODO: We do several things here:
      # 1. Create current and historical directories
      # 2. Copy historical versions from existing package to /historical
      # 3. Move this version's artifacts and circuits to historical/ as well.
      # 4. Move this version's artifacts and circuits to current/
      # 5. Copy deployments.json to current/
      # 6. README.md, and LICENSE to current/
      # 7. Trim info from package.json
      - name: Prepare files for release
        run: |
          VERSION=${{ github.event.inputs.version }}
          mkdir -p export/${{ env.PROJECT_NAME }}/current/artifacts
          mkdir -p export/${{ env.PROJECT_NAME }}/historical
          
          # This snippet copies the contents of the nested directory artifacts/artifacts
          # and moves them up one level to artifacts/. Then it removes the now empty nested directory.
          # After we run this once, this won't be needed anymore.
          if [ -d "node_modules/${{ env.PROJECT_NAME }}/historical" ]; then
            # First copy all historical versions
            cp -r node_modules/${{ env.PROJECT_NAME }}/historical/** export/${{ env.PROJECT_NAME }}/historical/
            
            # Fix structure for each historical version
            for version_dir in export/${{ env.PROJECT_NAME }}/historical/*/; do
              if [ -d "${version_dir}artifacts/artifacts" ]; then
                echo "Fixing double-nested artifacts structure in ${version_dir}"
                # Move contents up one level
                mv "${version_dir}artifacts/artifacts"/* "${version_dir}artifacts/"
                # Remove empty nested directory
                rm -rf "${version_dir}artifacts/artifacts"
              fi
            done
          else
            echo "No historical directory found, skipping copy"
          fi

          # Copy the compiled JS files and target directory to current/
          cp -r dist/artifacts/* export/${{ env.PROJECT_NAME }}/current/artifacts/
          cp -r target export/${{ env.PROJECT_NAME }}/current/

          # Copy deployments.json if it exists
          if [ -f "src/deployments.json" ]; then
            cp src/deployments.json export/${{ env.PROJECT_NAME }}/current/
          else
            echo "src/deployments.json not found, skipping copy"
          fi
          
          cp -r export/${{ env.PROJECT_NAME }}/current export/${{ env.PROJECT_NAME }}/historical/$VERSION
          cp README.md export/${{ env.PROJECT_NAME }}/
          cp LICENSE export/${{ env.PROJECT_NAME }}/
          # Trim fields and set the version to the workflow input so the published package matches the requested version
          cat package.json | jq --arg v "$VERSION" 'del(.scripts, .jest, ."lint-staged", .packageManager, .devDependencies, .dependencies, .engines, .resolutions) | .version=$v' > export/${{ env.PROJECT_NAME }}/package.json

      - name: Publish to NPM
        run: cd export/${{ env.PROJECT_NAME }} && npm publish --access public --tag latest
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release Tag (adds 'v' prefix to input)
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          echo "Tagging release as v${{ github.event.inputs.version }}"
          git tag -a v${{ github.event.inputs.version }} -m "Release v${{ github.event.inputs.version }}"
          git push origin v${{ github.event.inputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}